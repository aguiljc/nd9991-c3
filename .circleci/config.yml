version: 2.1

# Use a package of configuration called an orb.
#orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3

# Define the jobs we want to run for this project
jobs:
    create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
        # - run:
        #     name: "Get the IP Address of the Backend EC2 instance and create inventory"
        #     command: |
        #       echo -e "[web]\n" > ./.circleci/ansible/inventory
        #       aws ec2 describe-instances \
        #       --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
        #       --query 'Reservations[*].Instances[*].PublicIpAddress' \
        #       --output text >> ./.circleci/ansible/inventory
        #       cat ./.circleci/ansible/inventory

    # Exercise: Config and Deployment
    configure_infrastructure: 
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["0b:c5:ff:4b:c1:d2:d4:b1:09:c6:ff:ca:4d:1b:8a:a2"] 
        - run:
            name: Install Ansible
            command: |
              apk add --update ansible
        - run:
            name: Run Playbook and Configure server
            command: |
              ansible-playbook -i inventory main-remote.yml
    
    #Exercise: Smoke Testing
    smoke_test:
      docker:
        - image: alpine:latest
      steps:
        - run: apk add --update curl
        - run:
            name: smoke test
            command: |
              URL="https://blog.udacity.com/"
              # Test if website exists
              if curl -s --head ${URL}
              then
                return 0
              else
                return 1
              fi


# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      - smoke_test
